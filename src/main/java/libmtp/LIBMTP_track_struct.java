package libmtp;
import libmtp.LibmtpLibrary.LIBMTP_filetype_t;
import org.bridj.BridJ;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * MTP track struct<br>
 * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:637</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("mtp")
public class LIBMTP_track_struct extends StructObject {
	static {
		BridJ.register();
	}
	/** < Unique item ID */
	@Field(0)
	public int item_id() {
		return this.io.getIntField(this, 0);
	}
	/** < Unique item ID */
	@Field(0)
	public LIBMTP_track_struct item_id(int item_id) {
		this.io.setIntField(this, 0, item_id);
		return this;
	}
	/** < ID of parent folder */
	@Field(1)
	public int parent_id() {
		return this.io.getIntField(this, 1);
	}
	/** < ID of parent folder */
	@Field(1)
	public LIBMTP_track_struct parent_id(int parent_id) {
		this.io.setIntField(this, 1, parent_id);
		return this;
	}
	/** < ID of storage holding this track */
	@Field(2)
	public int storage_id() {
		return this.io.getIntField(this, 2);
	}
	/** < ID of storage holding this track */
	@Field(2)
	public LIBMTP_track_struct storage_id(int storage_id) {
		this.io.setIntField(this, 2, storage_id);
		return this;
	}
	/**
	 * < Track title<br>
	 * C type : char*
	 */
	@Field(3)
	public Pointer<Byte > title() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * < Track title<br>
	 * C type : char*
	 */
	@Field(3)
	public LIBMTP_track_struct title(Pointer<Byte > title) {
		this.io.setPointerField(this, 3, title);
		return this;
	}
	/**
	 * < Name of recording artist<br>
	 * C type : char*
	 */
	@Field(4)
	public Pointer<Byte > artist() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * < Name of recording artist<br>
	 * C type : char*
	 */
	@Field(4)
	public LIBMTP_track_struct artist(Pointer<Byte > artist) {
		this.io.setPointerField(this, 4, artist);
		return this;
	}
	/**
	 * < Name of recording composer<br>
	 * C type : char*
	 */
	@Field(5)
	public Pointer<Byte > composer() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * < Name of recording composer<br>
	 * C type : char*
	 */
	@Field(5)
	public LIBMTP_track_struct composer(Pointer<Byte > composer) {
		this.io.setPointerField(this, 5, composer);
		return this;
	}
	/**
	 * < Genre name for track<br>
	 * C type : char*
	 */
	@Field(6)
	public Pointer<Byte > genre() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * < Genre name for track<br>
	 * C type : char*
	 */
	@Field(6)
	public LIBMTP_track_struct genre(Pointer<Byte > genre) {
		this.io.setPointerField(this, 6, genre);
		return this;
	}
	/**
	 * < Album name for track<br>
	 * C type : char*
	 */
	@Field(7)
	public Pointer<Byte > album() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * < Album name for track<br>
	 * C type : char*
	 */
	@Field(7)
	public LIBMTP_track_struct album(Pointer<Byte > album) {
		this.io.setPointerField(this, 7, album);
		return this;
	}
	/**
	 * < Date of original recording as a string<br>
	 * C type : char*
	 */
	@Field(8)
	public Pointer<Byte > date() {
		return this.io.getPointerField(this, 8);
	}
	/**
	 * < Date of original recording as a string<br>
	 * C type : char*
	 */
	@Field(8)
	public LIBMTP_track_struct date(Pointer<Byte > date) {
		this.io.setPointerField(this, 8, date);
		return this;
	}
	/**
	 * < Original filename of this track<br>
	 * C type : char*
	 */
	@Field(9)
	public Pointer<Byte > filename() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * < Original filename of this track<br>
	 * C type : char*
	 */
	@Field(9)
	public LIBMTP_track_struct filename(Pointer<Byte > filename) {
		this.io.setPointerField(this, 9, filename);
		return this;
	}
	/** < Track number (in sequence on recording) */
	@Field(10)
	public short tracknumber() {
		return this.io.getShortField(this, 10);
	}
	/** < Track number (in sequence on recording) */
	@Field(10)
	public LIBMTP_track_struct tracknumber(short tracknumber) {
		this.io.setShortField(this, 10, tracknumber);
		return this;
	}
	/** < Duration in milliseconds */
	@Field(11)
	public int duration() {
		return this.io.getIntField(this, 11);
	}
	/** < Duration in milliseconds */
	@Field(11)
	public LIBMTP_track_struct duration(int duration) {
		this.io.setIntField(this, 11, duration);
		return this;
	}
	/** < Sample rate of original file, min 0x1f80 max 0xbb80 */
	@Field(12)
	public int samplerate() {
		return this.io.getIntField(this, 12);
	}
	/** < Sample rate of original file, min 0x1f80 max 0xbb80 */
	@Field(12)
	public LIBMTP_track_struct samplerate(int samplerate) {
		this.io.setIntField(this, 12, samplerate);
		return this;
	}
	/** < Number of channels in this recording 0 = unknown, 1 or 2 */
	@Field(13)
	public short nochannels() {
		return this.io.getShortField(this, 13);
	}
	/** < Number of channels in this recording 0 = unknown, 1 or 2 */
	@Field(13)
	public LIBMTP_track_struct nochannels(short nochannels) {
		this.io.setShortField(this, 13, nochannels);
		return this;
	}
	/** < FourCC wave codec name */
	@Field(14)
	public int wavecodec() {
		return this.io.getIntField(this, 14);
	}
	/** < FourCC wave codec name */
	@Field(14)
	public LIBMTP_track_struct wavecodec(int wavecodec) {
		this.io.setIntField(this, 14, wavecodec);
		return this;
	}
	/** < (Average) bitrate for this file min=1 max=0x16e360 */
	@Field(15)
	public int bitrate() {
		return this.io.getIntField(this, 15);
	}
	/** < (Average) bitrate for this file min=1 max=0x16e360 */
	@Field(15)
	public LIBMTP_track_struct bitrate(int bitrate) {
		this.io.setIntField(this, 15, bitrate);
		return this;
	}
	/** < 0 = unused, 1 = constant, 2 = VBR, 3 = free */
	@Field(16)
	public short bitratetype() {
		return this.io.getShortField(this, 16);
	}
	/** < 0 = unused, 1 = constant, 2 = VBR, 3 = free */
	@Field(16)
	public LIBMTP_track_struct bitratetype(short bitratetype) {
		this.io.setShortField(this, 16, bitratetype);
		return this;
	}
	/** < User rating 0-100 (0x00-0x64) */
	@Field(17)
	public short rating() {
		return this.io.getShortField(this, 17);
	}
	/** < User rating 0-100 (0x00-0x64) */
	@Field(17)
	public LIBMTP_track_struct rating(short rating) {
		this.io.setShortField(this, 17, rating);
		return this;
	}
	/** < Number of times used/played */
	@Field(18)
	public int usecount() {
		return this.io.getIntField(this, 18);
	}
	/** < Number of times used/played */
	@Field(18)
	public LIBMTP_track_struct usecount(int usecount) {
		this.io.setIntField(this, 18, usecount);
		return this;
	}
	/** < Size of track file in bytes */
	@Field(19)
	public long filesize() {
		return this.io.getLongField(this, 19);
	}
	/** < Size of track file in bytes */
	@Field(19)
	public LIBMTP_track_struct filesize(long filesize) {
		this.io.setLongField(this, 19, filesize);
		return this;
	}
	/** < Date of last alteration of the track */
	@CLong
	@Field(20)
	public long modificationdate() {
		return this.io.getCLongField(this, 20);
	}
	/** < Date of last alteration of the track */
	@CLong
	@Field(20)
	public LIBMTP_track_struct modificationdate(long modificationdate) {
		this.io.setCLongField(this, 20, modificationdate);
		return this;
	}
	/**
	 * < Filetype used for the current track<br>
	 * C type : LIBMTP_filetype_t
	 */
	@Field(21)
	public IntValuedEnum<LIBMTP_filetype_t > filetype() {
		return this.io.getEnumField(this, 21);
	}
	/**
	 * < Filetype used for the current track<br>
	 * C type : LIBMTP_filetype_t
	 */
	@Field(21)
	public LIBMTP_track_struct filetype(IntValuedEnum<LIBMTP_filetype_t > filetype) {
		this.io.setEnumField(this, 21, filetype);
		return this;
	}
	/**
	 * < Next track in list or NULL if last track<br>
	 * C type : LIBMTP_track_t*
	 */
	@Field(22)
	public Pointer<LIBMTP_track_struct > next() {
		return this.io.getPointerField(this, 22);
	}
	/**
	 * < Next track in list or NULL if last track<br>
	 * C type : LIBMTP_track_t*
	 */
	@Field(22)
	public LIBMTP_track_struct next(Pointer<LIBMTP_track_struct > next) {
		this.io.setPointerField(this, 22, next);
		return this;
	}
	public LIBMTP_track_struct() {
		super();
	}
	public LIBMTP_track_struct(Pointer pointer) {
		super(pointer);
	}
}
