package libmtp;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * MTP Album structure<br>
 * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:679</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("mtp")
public class LIBMTP_album_struct extends StructObject {
	static {
		BridJ.register();
	}
	/** < Unique playlist ID */
	@Field(0) 
	public int album_id() {
		return this.io.getIntField(this, 0);
	}
	/** < Unique playlist ID */
	@Field(0) 
	public LIBMTP_album_struct album_id(int album_id) {
		this.io.setIntField(this, 0, album_id);
		return this;
	}
	/** < ID of parent folder */
	@Field(1) 
	public int parent_id() {
		return this.io.getIntField(this, 1);
	}
	/** < ID of parent folder */
	@Field(1) 
	public LIBMTP_album_struct parent_id(int parent_id) {
		this.io.setIntField(this, 1, parent_id);
		return this;
	}
	/** < ID of storage holding this album */
	@Field(2) 
	public int storage_id() {
		return this.io.getIntField(this, 2);
	}
	/** < ID of storage holding this album */
	@Field(2) 
	public LIBMTP_album_struct storage_id(int storage_id) {
		this.io.setIntField(this, 2, storage_id);
		return this;
	}
	/**
	 * < Name of album<br>
	 * C type : char*
	 */
	@Field(3) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * < Name of album<br>
	 * C type : char*
	 */
	@Field(3) 
	public LIBMTP_album_struct name(Pointer<Byte > name) {
		this.io.setPointerField(this, 3, name);
		return this;
	}
	/**
	 * < Name of album artist<br>
	 * C type : char*
	 */
	@Field(4) 
	public Pointer<Byte > artist() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * < Name of album artist<br>
	 * C type : char*
	 */
	@Field(4) 
	public LIBMTP_album_struct artist(Pointer<Byte > artist) {
		this.io.setPointerField(this, 4, artist);
		return this;
	}
	/**
	 * < Name of recording composer<br>
	 * C type : char*
	 */
	@Field(5) 
	public Pointer<Byte > composer() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * < Name of recording composer<br>
	 * C type : char*
	 */
	@Field(5) 
	public LIBMTP_album_struct composer(Pointer<Byte > composer) {
		this.io.setPointerField(this, 5, composer);
		return this;
	}
	/**
	 * < Genre of album<br>
	 * C type : char*
	 */
	@Field(6) 
	public Pointer<Byte > genre() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * < Genre of album<br>
	 * C type : char*
	 */
	@Field(6) 
	public LIBMTP_album_struct genre(Pointer<Byte > genre) {
		this.io.setPointerField(this, 6, genre);
		return this;
	}
	/**
	 * < The tracks in this album<br>
	 * C type : uint32_t*
	 */
	@Field(7) 
	public Pointer<Integer > tracks() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * < The tracks in this album<br>
	 * C type : uint32_t*
	 */
	@Field(7) 
	public LIBMTP_album_struct tracks(Pointer<Integer > tracks) {
		this.io.setPointerField(this, 7, tracks);
		return this;
	}
	/** < The number of tracks in this album */
	@Field(8) 
	public int no_tracks() {
		return this.io.getIntField(this, 8);
	}
	/** < The number of tracks in this album */
	@Field(8) 
	public LIBMTP_album_struct no_tracks(int no_tracks) {
		this.io.setIntField(this, 8, no_tracks);
		return this;
	}
	/**
	 * < Next album or NULL if last album<br>
	 * C type : LIBMTP_album_t*
	 */
	@Field(9) 
	public Pointer<LIBMTP_album_struct > next() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * < Next album or NULL if last album<br>
	 * C type : LIBMTP_album_t*
	 */
	@Field(9) 
	public LIBMTP_album_struct next(Pointer<LIBMTP_album_struct > next) {
		this.io.setPointerField(this, 9, next);
		return this;
	}
	public LIBMTP_album_struct() {
		super();
	}
	public LIBMTP_album_struct(Pointer pointer) {
		super(pointer);
	}
}
