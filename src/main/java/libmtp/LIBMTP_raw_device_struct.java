package libmtp;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * A data structure to hold a raw MTP device connected<br>
 * to the bus.<br>
 * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:473</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("mtp")
public class LIBMTP_raw_device_struct extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * < The device entry for this raw device<br>
	 * C type : LIBMTP_device_entry_t
	 */
	@Field(0) 
	public LIBMTP_device_entry_struct device_entry() {
		return this.io.getNativeObjectField(this, 0);
	}
	/**
	 * < The device entry for this raw device<br>
	 * C type : LIBMTP_device_entry_t
	 */
	@Field(0) 
	public LIBMTP_raw_device_struct device_entry(LIBMTP_device_entry_struct device_entry) {
		this.io.setNativeObjectField(this, 0, device_entry);
		return this;
	}
	/** < Location of the bus, if device available */
	@Field(1) 
	public int bus_location() {
		return this.io.getIntField(this, 1);
	}
	/** < Location of the bus, if device available */
	@Field(1) 
	public LIBMTP_raw_device_struct bus_location(int bus_location) {
		this.io.setIntField(this, 1, bus_location);
		return this;
	}
	/** < Device number on the bus, if device available */
	@Field(2) 
	public byte devnum() {
		return this.io.getByteField(this, 2);
	}
	/** < Device number on the bus, if device available */
	@Field(2) 
	public LIBMTP_raw_device_struct devnum(byte devnum) {
		this.io.setByteField(this, 2, devnum);
		return this;
	}
	public LIBMTP_raw_device_struct() {
		super();
	}
	public LIBMTP_raw_device_struct(Pointer pointer) {
		super(pointer);
	}
}
