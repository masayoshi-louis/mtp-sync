package libmtp;

import java.util.Collections;
import java.util.Iterator;

import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>libmtp</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("mtp")
@Runtime(CRuntime.class)
public class LibmtpLibrary {
    static {
        BridJ.register();
    }

    /**
     * enum values<br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public enum LIBMTP_filetype_t implements IntValuedEnum<LIBMTP_filetype_t> {
        LIBMTP_FILETYPE_FOLDER(0),
        LIBMTP_FILETYPE_WAV(1),
        LIBMTP_FILETYPE_MP3(2),
        LIBMTP_FILETYPE_WMA(3),
        LIBMTP_FILETYPE_OGG(4),
        LIBMTP_FILETYPE_AUDIBLE(5),
        LIBMTP_FILETYPE_MP4(6),
        LIBMTP_FILETYPE_UNDEF_AUDIO(7),
        LIBMTP_FILETYPE_WMV(8),
        LIBMTP_FILETYPE_AVI(9),
        LIBMTP_FILETYPE_MPEG(10),
        LIBMTP_FILETYPE_ASF(11),
        LIBMTP_FILETYPE_QT(12),
        LIBMTP_FILETYPE_UNDEF_VIDEO(13),
        LIBMTP_FILETYPE_JPEG(14),
        LIBMTP_FILETYPE_JFIF(15),
        LIBMTP_FILETYPE_TIFF(16),
        LIBMTP_FILETYPE_BMP(17),
        LIBMTP_FILETYPE_GIF(18),
        LIBMTP_FILETYPE_PICT(19),
        LIBMTP_FILETYPE_PNG(20),
        LIBMTP_FILETYPE_VCALENDAR1(21),
        LIBMTP_FILETYPE_VCALENDAR2(22),
        LIBMTP_FILETYPE_VCARD2(23),
        LIBMTP_FILETYPE_VCARD3(24),
        LIBMTP_FILETYPE_WINDOWSIMAGEFORMAT(25),
        LIBMTP_FILETYPE_WINEXEC(26),
        LIBMTP_FILETYPE_TEXT(27),
        LIBMTP_FILETYPE_HTML(28),
        LIBMTP_FILETYPE_FIRMWARE(29),
        LIBMTP_FILETYPE_AAC(30),
        LIBMTP_FILETYPE_MEDIACARD(31),
        LIBMTP_FILETYPE_FLAC(32),
        LIBMTP_FILETYPE_MP2(33),
        LIBMTP_FILETYPE_M4A(34),
        LIBMTP_FILETYPE_DOC(35),
        LIBMTP_FILETYPE_XML(36),
        LIBMTP_FILETYPE_XLS(37),
        LIBMTP_FILETYPE_PPT(38),
        LIBMTP_FILETYPE_MHT(39),
        LIBMTP_FILETYPE_JP2(40),
        LIBMTP_FILETYPE_JPX(41),
        LIBMTP_FILETYPE_ALBUM(42),
        LIBMTP_FILETYPE_PLAYLIST(43),
        LIBMTP_FILETYPE_UNKNOWN(44);

        LIBMTP_filetype_t(long value) {
            this.value = value;
        }

        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<LIBMTP_filetype_t> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<LIBMTP_filetype_t> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    }

    ;

    /**
     * enum values<br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public enum LIBMTP_property_t implements IntValuedEnum<LIBMTP_property_t> {
        LIBMTP_PROPERTY_StorageID(0),
        LIBMTP_PROPERTY_ObjectFormat(1),
        LIBMTP_PROPERTY_ProtectionStatus(2),
        LIBMTP_PROPERTY_ObjectSize(3),
        LIBMTP_PROPERTY_AssociationType(4),
        LIBMTP_PROPERTY_AssociationDesc(5),
        LIBMTP_PROPERTY_ObjectFileName(6),
        LIBMTP_PROPERTY_DateCreated(7),
        LIBMTP_PROPERTY_DateModified(8),
        LIBMTP_PROPERTY_Keywords(9),
        LIBMTP_PROPERTY_ParentObject(10),
        LIBMTP_PROPERTY_AllowedFolderContents(11),
        LIBMTP_PROPERTY_Hidden(12),
        LIBMTP_PROPERTY_SystemObject(13),
        LIBMTP_PROPERTY_PersistantUniqueObjectIdentifier(14),
        LIBMTP_PROPERTY_SyncID(15),
        LIBMTP_PROPERTY_PropertyBag(16),
        LIBMTP_PROPERTY_Name(17),
        LIBMTP_PROPERTY_CreatedBy(18),
        LIBMTP_PROPERTY_Artist(19),
        LIBMTP_PROPERTY_DateAuthored(20),
        LIBMTP_PROPERTY_Description(21),
        LIBMTP_PROPERTY_URLReference(22),
        LIBMTP_PROPERTY_LanguageLocale(23),
        LIBMTP_PROPERTY_CopyrightInformation(24),
        LIBMTP_PROPERTY_Source(25),
        LIBMTP_PROPERTY_OriginLocation(26),
        LIBMTP_PROPERTY_DateAdded(27),
        LIBMTP_PROPERTY_NonConsumable(28),
        LIBMTP_PROPERTY_CorruptOrUnplayable(29),
        LIBMTP_PROPERTY_ProducerSerialNumber(30),
        LIBMTP_PROPERTY_RepresentativeSampleFormat(31),
        LIBMTP_PROPERTY_RepresentativeSampleSize(32),
        LIBMTP_PROPERTY_RepresentativeSampleHeight(33),
        LIBMTP_PROPERTY_RepresentativeSampleWidth(34),
        LIBMTP_PROPERTY_RepresentativeSampleDuration(35),
        LIBMTP_PROPERTY_RepresentativeSampleData(36),
        LIBMTP_PROPERTY_Width(37),
        LIBMTP_PROPERTY_Height(38),
        LIBMTP_PROPERTY_Duration(39),
        LIBMTP_PROPERTY_Rating(40),
        LIBMTP_PROPERTY_Track(41),
        LIBMTP_PROPERTY_Genre(42),
        LIBMTP_PROPERTY_Credits(43),
        LIBMTP_PROPERTY_Lyrics(44),
        LIBMTP_PROPERTY_SubscriptionContentID(45),
        LIBMTP_PROPERTY_ProducedBy(46),
        LIBMTP_PROPERTY_UseCount(47),
        LIBMTP_PROPERTY_SkipCount(48),
        LIBMTP_PROPERTY_LastAccessed(49),
        LIBMTP_PROPERTY_ParentalRating(50),
        LIBMTP_PROPERTY_MetaGenre(51),
        LIBMTP_PROPERTY_Composer(52),
        LIBMTP_PROPERTY_EffectiveRating(53),
        LIBMTP_PROPERTY_Subtitle(54),
        LIBMTP_PROPERTY_OriginalReleaseDate(55),
        LIBMTP_PROPERTY_AlbumName(56),
        LIBMTP_PROPERTY_AlbumArtist(57),
        LIBMTP_PROPERTY_Mood(58),
        LIBMTP_PROPERTY_DRMStatus(59),
        LIBMTP_PROPERTY_SubDescription(60),
        LIBMTP_PROPERTY_IsCropped(61),
        LIBMTP_PROPERTY_IsColorCorrected(62),
        LIBMTP_PROPERTY_ImageBitDepth(63),
        LIBMTP_PROPERTY_Fnumber(64),
        LIBMTP_PROPERTY_ExposureTime(65),
        LIBMTP_PROPERTY_ExposureIndex(66),
        LIBMTP_PROPERTY_DisplayName(67),
        LIBMTP_PROPERTY_BodyText(68),
        LIBMTP_PROPERTY_Subject(69),
        LIBMTP_PROPERTY_Priority(70),
        LIBMTP_PROPERTY_GivenName(71),
        LIBMTP_PROPERTY_MiddleNames(72),
        LIBMTP_PROPERTY_FamilyName(73),
        LIBMTP_PROPERTY_Prefix(74),
        LIBMTP_PROPERTY_Suffix(75),
        LIBMTP_PROPERTY_PhoneticGivenName(76),
        LIBMTP_PROPERTY_PhoneticFamilyName(77),
        LIBMTP_PROPERTY_EmailPrimary(78),
        LIBMTP_PROPERTY_EmailPersonal1(79),
        LIBMTP_PROPERTY_EmailPersonal2(80),
        LIBMTP_PROPERTY_EmailBusiness1(81),
        LIBMTP_PROPERTY_EmailBusiness2(82),
        LIBMTP_PROPERTY_EmailOthers(83),
        LIBMTP_PROPERTY_PhoneNumberPrimary(84),
        LIBMTP_PROPERTY_PhoneNumberPersonal(85),
        LIBMTP_PROPERTY_PhoneNumberPersonal2(86),
        LIBMTP_PROPERTY_PhoneNumberBusiness(87),
        LIBMTP_PROPERTY_PhoneNumberBusiness2(88),
        LIBMTP_PROPERTY_PhoneNumberMobile(89),
        LIBMTP_PROPERTY_PhoneNumberMobile2(90),
        LIBMTP_PROPERTY_FaxNumberPrimary(91),
        LIBMTP_PROPERTY_FaxNumberPersonal(92),
        LIBMTP_PROPERTY_FaxNumberBusiness(93),
        LIBMTP_PROPERTY_PagerNumber(94),
        LIBMTP_PROPERTY_PhoneNumberOthers(95),
        LIBMTP_PROPERTY_PrimaryWebAddress(96),
        LIBMTP_PROPERTY_PersonalWebAddress(97),
        LIBMTP_PROPERTY_BusinessWebAddress(98),
        LIBMTP_PROPERTY_InstantMessengerAddress(99),
        LIBMTP_PROPERTY_InstantMessengerAddress2(100),
        LIBMTP_PROPERTY_InstantMessengerAddress3(101),
        LIBMTP_PROPERTY_PostalAddressPersonalFull(102),
        LIBMTP_PROPERTY_PostalAddressPersonalFullLine1(103),
        LIBMTP_PROPERTY_PostalAddressPersonalFullLine2(104),
        LIBMTP_PROPERTY_PostalAddressPersonalFullCity(105),
        LIBMTP_PROPERTY_PostalAddressPersonalFullRegion(106),
        LIBMTP_PROPERTY_PostalAddressPersonalFullPostalCode(107),
        LIBMTP_PROPERTY_PostalAddressPersonalFullCountry(108),
        LIBMTP_PROPERTY_PostalAddressBusinessFull(109),
        LIBMTP_PROPERTY_PostalAddressBusinessLine1(110),
        LIBMTP_PROPERTY_PostalAddressBusinessLine2(111),
        LIBMTP_PROPERTY_PostalAddressBusinessCity(112),
        LIBMTP_PROPERTY_PostalAddressBusinessRegion(113),
        LIBMTP_PROPERTY_PostalAddressBusinessPostalCode(114),
        LIBMTP_PROPERTY_PostalAddressBusinessCountry(115),
        LIBMTP_PROPERTY_PostalAddressOtherFull(116),
        LIBMTP_PROPERTY_PostalAddressOtherLine1(117),
        LIBMTP_PROPERTY_PostalAddressOtherLine2(118),
        LIBMTP_PROPERTY_PostalAddressOtherCity(119),
        LIBMTP_PROPERTY_PostalAddressOtherRegion(120),
        LIBMTP_PROPERTY_PostalAddressOtherPostalCode(121),
        LIBMTP_PROPERTY_PostalAddressOtherCountry(122),
        LIBMTP_PROPERTY_OrganizationName(123),
        LIBMTP_PROPERTY_PhoneticOrganizationName(124),
        LIBMTP_PROPERTY_Role(125),
        LIBMTP_PROPERTY_Birthdate(126),
        LIBMTP_PROPERTY_MessageTo(127),
        LIBMTP_PROPERTY_MessageCC(128),
        LIBMTP_PROPERTY_MessageBCC(129),
        LIBMTP_PROPERTY_MessageRead(130),
        LIBMTP_PROPERTY_MessageReceivedTime(131),
        LIBMTP_PROPERTY_MessageSender(132),
        LIBMTP_PROPERTY_ActivityBeginTime(133),
        LIBMTP_PROPERTY_ActivityEndTime(134),
        LIBMTP_PROPERTY_ActivityLocation(135),
        LIBMTP_PROPERTY_ActivityRequiredAttendees(136),
        LIBMTP_PROPERTY_ActivityOptionalAttendees(137),
        LIBMTP_PROPERTY_ActivityResources(138),
        LIBMTP_PROPERTY_ActivityAccepted(139),
        LIBMTP_PROPERTY_Owner(140),
        LIBMTP_PROPERTY_Editor(141),
        LIBMTP_PROPERTY_Webmaster(142),
        LIBMTP_PROPERTY_URLSource(143),
        LIBMTP_PROPERTY_URLDestination(144),
        LIBMTP_PROPERTY_TimeBookmark(145),
        LIBMTP_PROPERTY_ObjectBookmark(146),
        LIBMTP_PROPERTY_ByteBookmark(147),
        LIBMTP_PROPERTY_LastBuildDate(148),
        LIBMTP_PROPERTY_TimetoLive(149),
        LIBMTP_PROPERTY_MediaGUID(150),
        LIBMTP_PROPERTY_TotalBitRate(151),
        LIBMTP_PROPERTY_BitRateType(152),
        LIBMTP_PROPERTY_SampleRate(153),
        LIBMTP_PROPERTY_NumberOfChannels(154),
        LIBMTP_PROPERTY_AudioBitDepth(155),
        LIBMTP_PROPERTY_ScanDepth(156),
        LIBMTP_PROPERTY_AudioWAVECodec(157),
        LIBMTP_PROPERTY_AudioBitRate(158),
        LIBMTP_PROPERTY_VideoFourCCCodec(159),
        LIBMTP_PROPERTY_VideoBitRate(160),
        LIBMTP_PROPERTY_FramesPerThousandSeconds(161),
        LIBMTP_PROPERTY_KeyFrameDistance(162),
        LIBMTP_PROPERTY_BufferSize(163),
        LIBMTP_PROPERTY_EncodingQuality(164),
        LIBMTP_PROPERTY_EncodingProfile(165),
        LIBMTP_PROPERTY_BuyFlag(166),
        LIBMTP_PROPERTY_UNKNOWN(167);

        LIBMTP_property_t(long value) {
            this.value = value;
        }

        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<LIBMTP_property_t> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<LIBMTP_property_t> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    }

    ;

    /**
     * enum values<br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public enum LIBMTP_datatype_t implements IntValuedEnum<LIBMTP_datatype_t> {
        LIBMTP_DATATYPE_INT8(0),
        LIBMTP_DATATYPE_UINT8(1),
        LIBMTP_DATATYPE_INT16(2),
        LIBMTP_DATATYPE_UINT16(3),
        LIBMTP_DATATYPE_INT32(4),
        LIBMTP_DATATYPE_UINT32(5),
        LIBMTP_DATATYPE_INT64(6),
        LIBMTP_DATATYPE_UINT64(7);

        LIBMTP_datatype_t(long value) {
            this.value = value;
        }

        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<LIBMTP_datatype_t> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<LIBMTP_datatype_t> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    }

    ;

    /**
     * enum values<br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public enum LIBMTP_devicecap_t implements IntValuedEnum<LIBMTP_devicecap_t> {
        LIBMTP_DEVICECAP_GetPartialObject(0),
        LIBMTP_DEVICECAP_SendPartialObject(1),
        LIBMTP_DEVICECAP_EditObjects(2);

        LIBMTP_devicecap_t(long value) {
            this.value = value;
        }

        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<LIBMTP_devicecap_t> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<LIBMTP_devicecap_t> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    }

    ;

    /**
     * enum values<br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public enum LIBMTP_error_number_t implements IntValuedEnum<LIBMTP_error_number_t> {
        LIBMTP_ERROR_NONE(0),
        LIBMTP_ERROR_GENERAL(1),
        LIBMTP_ERROR_PTP_LAYER(2),
        LIBMTP_ERROR_USB_LAYER(3),
        LIBMTP_ERROR_MEMORY_ALLOCATION(4),
        LIBMTP_ERROR_NO_DEVICE_ATTACHED(5),
        LIBMTP_ERROR_STORAGE_FULL(6),
        LIBMTP_ERROR_CONNECTING(7),
        LIBMTP_ERROR_CANCELLED(8);

        LIBMTP_error_number_t(long value) {
            this.value = value;
        }

        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<LIBMTP_error_number_t> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<LIBMTP_error_number_t> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    }

    ;

    /**
     * LIBMTP Event structure<br>
     * TODO: add all externally visible events here<br>
     * enum values<br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:737</i>
     */
    public enum LIBMTP_event_enum implements IntValuedEnum<LIBMTP_event_enum> {
        LIBMTP_EVENT_NONE(0),
        LIBMTP_EVENT_STORE_ADDED(1),
        LIBMTP_EVENT_STORE_REMOVED(2),
        LIBMTP_EVENT_OBJECT_ADDED(3),
        LIBMTP_EVENT_OBJECT_REMOVED(4);

        LIBMTP_event_enum(long value) {
            this.value = value;
        }

        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<LIBMTP_event_enum> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<LIBMTP_event_enum> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    }

    ;
    /**
     * define<br>
     * Conversion Error : 1.1.<br>
     * SKIPPED:<br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:0</i><br>
     * 1.1.
     */
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final String LIBMTP_VERSION_STRING = (String) "1.1.13";
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_DEBUG_NONE = (int) 0x00;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_DEBUG_PTP = (int) 0x01;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_DEBUG_PLST = (int) 0x02;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_DEBUG_USB = (int) 0x04;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_DEBUG_DATA = (int) 0x08;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_DEBUG_ALL = (int) 0xFF;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_HANDLER_RETURN_OK = (int) 0;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_HANDLER_RETURN_ERROR = (int) 1;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_HANDLER_RETURN_CANCEL = (int) 2;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_STORAGE_SORTBY_NOTSORTED = (int) 0;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_STORAGE_SORTBY_FREESPACE = (int) 1;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final int LIBMTP_STORAGE_SORTBY_MAXSPACE = (int) 2;
    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static final long LIBMTP_FILES_AND_FOLDERS_ROOT = (long) 0xffffffffL;

    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static abstract class LIBMTP_progressfunc_t extends Callback<LIBMTP_progressfunc_t> {
        public int apply(long sent, long total, Pointer<?> data) {
            return apply(sent, total, Pointer.getPeer(data));
        }

        public int apply(long sent, long total, @Ptr long data) {
            return apply(sent, total, Pointer.pointerToAddress(data));
        }
    }

    ;

    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static abstract class MTPDataGetFunc extends Callback<MTPDataGetFunc> {
        public short apply(Pointer<?> params, Pointer<?> priv, int wantlen, Pointer<Byte> data, Pointer<Integer> gotlen) {
            return apply(Pointer.getPeer(params), Pointer.getPeer(priv), wantlen, Pointer.getPeer(data), Pointer.getPeer(gotlen));
        }

        public short apply(@Ptr long params, @Ptr long priv, int wantlen, @Ptr long data, @Ptr long gotlen) {
            return apply(Pointer.pointerToAddress(params), Pointer.pointerToAddress(priv), wantlen, (Pointer) Pointer.pointerToAddress(data, Byte.class), (Pointer) Pointer.pointerToAddress(gotlen, Integer.class));
        }
    }

    ;

    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static abstract class MTPDataPutFunc extends Callback<MTPDataPutFunc> {
        public short apply(Pointer<?> params, Pointer<?> priv, int sendlen, Pointer<Byte> data, Pointer<Integer> putlen) {
            return apply(Pointer.getPeer(params), Pointer.getPeer(priv), sendlen, Pointer.getPeer(data), Pointer.getPeer(putlen));
        }

        public short apply(@Ptr long params, @Ptr long priv, int sendlen, @Ptr long data, @Ptr long putlen) {
            return apply(Pointer.pointerToAddress(params), Pointer.pointerToAddress(priv), sendlen, (Pointer) Pointer.pointerToAddress(data, Byte.class), (Pointer) Pointer.pointerToAddress(putlen, Integer.class));
        }
    }

    ;

    /**
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h</i>
     */
    public static abstract class LIBMTP_event_cb_fn extends Callback<LIBMTP_event_cb_fn> {
        public void apply(int int1, IntValuedEnum<LibmtpLibrary.LIBMTP_event_enum> LIBMTP_event_t1, int uint32_t1, Pointer<?> voidPtr1) {
            apply(int1, (int) LIBMTP_event_t1.value(), uint32_t1, Pointer.getPeer(voidPtr1));
        }

        public void apply(int int1, int LIBMTP_event_t1, int uint32_t1, @Ptr long voidPtr1) {
            apply(int1, FlagSet.fromValue(LIBMTP_event_t1, LibmtpLibrary.LIBMTP_event_enum.class), uint32_t1, Pointer.pointerToAddress(voidPtr1));
        }
    }

    ;

    /**
     * @defgroup internals The libmtp internals API.<br>
     * @{<br> Original signature : <code>void LIBMTP_Set_Debug(int)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:759</i>
     */
    public static native void LIBMTP_Set_Debug(int int1);

    /**
     * Original signature : <code>void LIBMTP_Init()</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:760</i>
     */
    public static native void LIBMTP_Init();

    /**
     * Original signature : <code>int LIBMTP_Get_Supported_Devices_List(const LIBMTP_device_entry_t**, const int*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:761</i>
     */
    public static int LIBMTP_Get_Supported_Devices_List(Pointer<Pointer<LIBMTP_device_entry_struct>> LIBMTP_device_entry_tPtrPtr1, Pointer<Integer> intPtr1) {
        return LIBMTP_Get_Supported_Devices_List(Pointer.getPeer(LIBMTP_device_entry_tPtrPtr1), Pointer.getPeer(intPtr1));
    }

    protected native static int LIBMTP_Get_Supported_Devices_List(@Ptr long LIBMTP_device_entry_tPtrPtr1, @Ptr long intPtr1);

    /**
     * @}<br>
     * @defgroup basic The basic device management API.<br>
     * @{<br> Original signature : <code>LIBMTP_error_number_t LIBMTP_Detect_Raw_Devices(LIBMTP_raw_device_t**, int*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:767</i>
     */
    public static IntValuedEnum<LibmtpLibrary.LIBMTP_error_number_t> LIBMTP_Detect_Raw_Devices(Pointer<Pointer<LIBMTP_raw_device_struct>> LIBMTP_raw_device_tPtrPtr1, Pointer<Integer> intPtr1) {
        return FlagSet.fromValue(LIBMTP_Detect_Raw_Devices(Pointer.getPeer(LIBMTP_raw_device_tPtrPtr1), Pointer.getPeer(intPtr1)), LibmtpLibrary.LIBMTP_error_number_t.class);
    }

    protected native static int LIBMTP_Detect_Raw_Devices(@Ptr long LIBMTP_raw_device_tPtrPtr1, @Ptr long intPtr1);

    /**
     * Original signature : <code>int LIBMTP_Check_Specific_Device(int, int)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:768</i>
     */
    public static native int LIBMTP_Check_Specific_Device(int busno, int devno);

    /**
     * Original signature : <code>LIBMTP_mtpdevice_t* LIBMTP_Open_Raw_Device(LIBMTP_raw_device_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:769</i>
     */
    public static Pointer<LIBMTP_mtpdevice_struct> LIBMTP_Open_Raw_Device(Pointer<LIBMTP_raw_device_struct> LIBMTP_raw_device_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Open_Raw_Device(Pointer.getPeer(LIBMTP_raw_device_tPtr1)), LIBMTP_mtpdevice_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Open_Raw_Device(@Ptr long LIBMTP_raw_device_tPtr1);

    /**
     * Original signature : <code>LIBMTP_mtpdevice_t* LIBMTP_Open_Raw_Device_Uncached(LIBMTP_raw_device_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:770</i>
     */
    public static Pointer<LIBMTP_mtpdevice_struct> LIBMTP_Open_Raw_Device_Uncached(Pointer<LIBMTP_raw_device_struct> LIBMTP_raw_device_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Open_Raw_Device_Uncached(Pointer.getPeer(LIBMTP_raw_device_tPtr1)), LIBMTP_mtpdevice_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Open_Raw_Device_Uncached(@Ptr long LIBMTP_raw_device_tPtr1);

    /**
     * Begin old, legacy interface<br>
     * Original signature : <code>LIBMTP_mtpdevice_t* LIBMTP_Get_First_Device()</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:772</i>
     */
    public static Pointer<LIBMTP_mtpdevice_struct> LIBMTP_Get_First_Device() {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_First_Device$2(), LIBMTP_mtpdevice_struct.class);
    }

    @Ptr
    @Name("LIBMTP_Get_First_Device")
    protected native static long LIBMTP_Get_First_Device$2();

    /**
     * Original signature : <code>LIBMTP_error_number_t LIBMTP_Get_Connected_Devices(LIBMTP_mtpdevice_t**)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:773</i>
     */
    public static IntValuedEnum<LibmtpLibrary.LIBMTP_error_number_t> LIBMTP_Get_Connected_Devices(Pointer<Pointer<LIBMTP_mtpdevice_struct>> LIBMTP_mtpdevice_tPtrPtr1) {
        return FlagSet.fromValue(LIBMTP_Get_Connected_Devices(Pointer.getPeer(LIBMTP_mtpdevice_tPtrPtr1)), LibmtpLibrary.LIBMTP_error_number_t.class);
    }

    protected native static int LIBMTP_Get_Connected_Devices(@Ptr long LIBMTP_mtpdevice_tPtrPtr1);

    /**
     * Original signature : <code>uint32_t LIBMTP_Number_Devices_In_List(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:774</i>
     */
    public static int LIBMTP_Number_Devices_In_List(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return LIBMTP_Number_Devices_In_List(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1));
    }

    protected native static int LIBMTP_Number_Devices_In_List(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>void LIBMTP_Release_Device_List(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:775</i>
     */
    public static void LIBMTP_Release_Device_List(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        LIBMTP_Release_Device_List(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1));
    }

    protected native static void LIBMTP_Release_Device_List(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * End old, legacy interface<br>
     * Original signature : <code>void LIBMTP_Release_Device(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:777</i>
     */
    public static void LIBMTP_Release_Device(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        LIBMTP_Release_Device(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1));
    }

    protected native static void LIBMTP_Release_Device(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>void LIBMTP_Dump_Device_Info(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:778</i>
     */
    public static void LIBMTP_Dump_Device_Info(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        LIBMTP_Dump_Device_Info(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1));
    }

    protected native static void LIBMTP_Dump_Device_Info(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Reset_Device(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:779</i>
     */
    public static int LIBMTP_Reset_Device(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return LIBMTP_Reset_Device(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1));
    }

    protected native static int LIBMTP_Reset_Device(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>char* LIBMTP_Get_Manufacturername(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:780</i>
     */
    public static Pointer<Byte> LIBMTP_Get_Manufacturername(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Manufacturername(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), Byte.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Manufacturername(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>char* LIBMTP_Get_Modelname(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:781</i>
     */
    public static Pointer<Byte> LIBMTP_Get_Modelname(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Modelname(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), Byte.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Modelname(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>char* LIBMTP_Get_Serialnumber(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:782</i>
     */
    public static Pointer<Byte> LIBMTP_Get_Serialnumber(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Serialnumber(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), Byte.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Serialnumber(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>char* LIBMTP_Get_Deviceversion(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:783</i>
     */
    public static Pointer<Byte> LIBMTP_Get_Deviceversion(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Deviceversion(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), Byte.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Deviceversion(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>char* LIBMTP_Get_Friendlyname(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:784</i>
     */
    public static Pointer<Byte> LIBMTP_Get_Friendlyname(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Friendlyname(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), Byte.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Friendlyname(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Set_Friendlyname(LIBMTP_mtpdevice_t*, const const char*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:785</i>
     */
    public static int LIBMTP_Set_Friendlyname(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<Byte> charPtr1) {
        return LIBMTP_Set_Friendlyname(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(charPtr1));
    }

    protected native static int LIBMTP_Set_Friendlyname(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long charPtr1);

    /**
     * Original signature : <code>char* LIBMTP_Get_Syncpartner(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:786</i>
     */
    public static Pointer<Byte> LIBMTP_Get_Syncpartner(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Syncpartner(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), Byte.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Syncpartner(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Set_Syncpartner(LIBMTP_mtpdevice_t*, const const char*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:787</i>
     */
    public static int LIBMTP_Set_Syncpartner(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<Byte> charPtr1) {
        return LIBMTP_Set_Syncpartner(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(charPtr1));
    }

    protected native static int LIBMTP_Set_Syncpartner(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long charPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_Batterylevel(LIBMTP_mtpdevice_t*, const uint8_t*, const uint8_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:788</i>
     */
    public static int LIBMTP_Get_Batterylevel(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<Byte> uint8_tPtr1, Pointer<Byte> uint8_tPtr2) {
        return LIBMTP_Get_Batterylevel(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(uint8_tPtr1), Pointer.getPeer(uint8_tPtr2));
    }

    protected native static int LIBMTP_Get_Batterylevel(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long uint8_tPtr1, @Ptr long uint8_tPtr2);

    /**
     * Original signature : <code>int LIBMTP_Get_Secure_Time(LIBMTP_mtpdevice_t*, const char**)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:791</i>
     */
    public static int LIBMTP_Get_Secure_Time(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<Pointer<Byte>> charPtrPtr1) {
        return LIBMTP_Get_Secure_Time(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(charPtrPtr1));
    }

    protected native static int LIBMTP_Get_Secure_Time(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long charPtrPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_Device_Certificate(LIBMTP_mtpdevice_t*, const char**)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:792</i>
     */
    public static int LIBMTP_Get_Device_Certificate(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<Pointer<Byte>> charPtrPtr1) {
        return LIBMTP_Get_Device_Certificate(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(charPtrPtr1));
    }

    protected native static int LIBMTP_Get_Device_Certificate(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long charPtrPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_Supported_Filetypes(LIBMTP_mtpdevice_t*, const uint16_t**, const uint16_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:793</i>
     */
    public static int LIBMTP_Get_Supported_Filetypes(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<Pointer<Short>> uint16_tPtrPtr1, Pointer<Short> uint16_tPtr1) {
        return LIBMTP_Get_Supported_Filetypes(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(uint16_tPtrPtr1), Pointer.getPeer(uint16_tPtr1));
    }

    protected native static int LIBMTP_Get_Supported_Filetypes(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long uint16_tPtrPtr1, @Ptr long uint16_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Check_Capability(LIBMTP_mtpdevice_t*, LIBMTP_devicecap_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:794</i>
     */
    public static int LIBMTP_Check_Capability(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, IntValuedEnum<LibmtpLibrary.LIBMTP_devicecap_t> LIBMTP_devicecap_t1) {
        return LIBMTP_Check_Capability(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), (int) LIBMTP_devicecap_t1.value());
    }

    protected native static int LIBMTP_Check_Capability(@Ptr long LIBMTP_mtpdevice_tPtr1, int LIBMTP_devicecap_t1);

    /**
     * Original signature : <code>LIBMTP_error_t* LIBMTP_Get_Errorstack(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:795</i>
     */
    public static Pointer<LIBMTP_error_struct> LIBMTP_Get_Errorstack(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Errorstack(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), LIBMTP_error_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Errorstack(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>void LIBMTP_Clear_Errorstack(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:796</i>
     */
    public static void LIBMTP_Clear_Errorstack(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        LIBMTP_Clear_Errorstack(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1));
    }

    protected native static void LIBMTP_Clear_Errorstack(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>void LIBMTP_Dump_Errorstack(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:797</i>
     */
    public static void LIBMTP_Dump_Errorstack(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        LIBMTP_Dump_Errorstack(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1));
    }

    protected native static void LIBMTP_Dump_Errorstack(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_Storage(LIBMTP_mtpdevice_t*, const int)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:803</i>
     */
    public static int LIBMTP_Get_Storage(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int int1) {
        return LIBMTP_Get_Storage(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), int1);
    }

    protected native static int LIBMTP_Get_Storage(@Ptr long LIBMTP_mtpdevice_tPtr1, int int1);

    /**
     * Original signature : <code>int LIBMTP_Format_Storage(LIBMTP_mtpdevice_t*, LIBMTP_devicestorage_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:804</i>
     */
    public static int LIBMTP_Format_Storage(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_devicestorage_struct> LIBMTP_devicestorage_tPtr1) {
        return LIBMTP_Format_Storage(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_devicestorage_tPtr1));
    }

    protected native static int LIBMTP_Format_Storage(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_devicestorage_tPtr1);

    /**
     * Get/set arbitrary properties.  These do not update the cache; should only be used on<br>
     * properties not stored in structs<br>
     * Original signature : <code>char* LIBMTP_Get_String_From_Object(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_property_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:810</i>
     */
    public static Pointer<Byte> LIBMTP_Get_String_From_Object(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_String_From_Object(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, (int) LIBMTP_property_t1.value()), Byte.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_String_From_Object(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int LIBMTP_property_t1);

    /**
     * Original signature : <code>uint64_t LIBMTP_Get_u64_From_Object(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_property_t, const uint64_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:811</i>
     */
    public static long LIBMTP_Get_u64_From_Object(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, long uint64_t1) {
        return LIBMTP_Get_u64_From_Object(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, (int) LIBMTP_property_t1.value(), uint64_t1);
    }

    protected native static long LIBMTP_Get_u64_From_Object(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int LIBMTP_property_t1, long uint64_t1);

    /**
     * Original signature : <code>uint32_t LIBMTP_Get_u32_From_Object(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_property_t, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:813</i>
     */
    public static int LIBMTP_Get_u32_From_Object(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, int uint32_t2) {
        return LIBMTP_Get_u32_From_Object(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, (int) LIBMTP_property_t1.value(), uint32_t2);
    }

    protected native static int LIBMTP_Get_u32_From_Object(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int LIBMTP_property_t1, int uint32_t2);

    /**
     * Original signature : <code>uint16_t LIBMTP_Get_u16_From_Object(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_property_t, const uint16_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:815</i>
     */
    public static short LIBMTP_Get_u16_From_Object(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, short uint16_t1) {
        return LIBMTP_Get_u16_From_Object(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, (int) LIBMTP_property_t1.value(), uint16_t1);
    }

    protected native static short LIBMTP_Get_u16_From_Object(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int LIBMTP_property_t1, short uint16_t1);

    /**
     * Original signature : <code>uint8_t LIBMTP_Get_u8_From_Object(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_property_t, const uint8_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:817</i>
     */
    public static byte LIBMTP_Get_u8_From_Object(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, byte uint8_t1) {
        return LIBMTP_Get_u8_From_Object(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, (int) LIBMTP_property_t1.value(), uint8_t1);
    }

    protected native static byte LIBMTP_Get_u8_From_Object(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int LIBMTP_property_t1, byte uint8_t1);

    /**
     * Original signature : <code>int LIBMTP_Set_Object_String(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_property_t, const const char*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:819</i>
     */
    public static int LIBMTP_Set_Object_String(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, Pointer<Byte> charPtr1) {
        return LIBMTP_Set_Object_String(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, (int) LIBMTP_property_t1.value(), Pointer.getPeer(charPtr1));
    }

    protected native static int LIBMTP_Set_Object_String(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int LIBMTP_property_t1, @Ptr long charPtr1);

    /**
     * Original signature : <code>int LIBMTP_Set_Object_u32(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_property_t, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:821</i>
     */
    public static int LIBMTP_Set_Object_u32(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, int uint32_t2) {
        return LIBMTP_Set_Object_u32(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, (int) LIBMTP_property_t1.value(), uint32_t2);
    }

    protected native static int LIBMTP_Set_Object_u32(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int LIBMTP_property_t1, int uint32_t2);

    /**
     * Original signature : <code>int LIBMTP_Set_Object_u16(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_property_t, const uint16_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:823</i>
     */
    public static int LIBMTP_Set_Object_u16(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, short uint16_t1) {
        return LIBMTP_Set_Object_u16(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, (int) LIBMTP_property_t1.value(), uint16_t1);
    }

    protected native static int LIBMTP_Set_Object_u16(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int LIBMTP_property_t1, short uint16_t1);

    /**
     * Original signature : <code>int LIBMTP_Set_Object_u8(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_property_t, const uint8_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:825</i>
     */
    public static int LIBMTP_Set_Object_u8(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, byte uint8_t1) {
        return LIBMTP_Set_Object_u8(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, (int) LIBMTP_property_t1.value(), uint8_t1);
    }

    protected native static int LIBMTP_Set_Object_u8(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int LIBMTP_property_t1, byte uint8_t1);

    /**
     * Original signature : <code>const char* LIBMTP_Get_Property_Description(LIBMTP_property_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:827</i>
     */
    public static Pointer<Byte> LIBMTP_Get_Property_Description(IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> inproperty) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Property_Description((int) inproperty.value()), Byte.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Property_Description(int inproperty);

    /**
     * Original signature : <code>int LIBMTP_Is_Property_Supported(LIBMTP_mtpdevice_t*, const LIBMTP_property_t, const LIBMTP_filetype_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:828</i>
     */
    public static int LIBMTP_Is_Property_Supported(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_filetype_t> LIBMTP_filetype_t1) {
        return LIBMTP_Is_Property_Supported(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), (int) LIBMTP_property_t1.value(), (int) LIBMTP_filetype_t1.value());
    }

    protected native static int LIBMTP_Is_Property_Supported(@Ptr long LIBMTP_mtpdevice_tPtr1, int LIBMTP_property_t1, int LIBMTP_filetype_t1);

    /**
     * Original signature : <code>int LIBMTP_Get_Allowed_Property_Values(LIBMTP_mtpdevice_t*, const LIBMTP_property_t, const LIBMTP_filetype_t, LIBMTP_allowed_values_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:830</i>
     */
    public static int LIBMTP_Get_Allowed_Property_Values(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, IntValuedEnum<LibmtpLibrary.LIBMTP_property_t> LIBMTP_property_t1, IntValuedEnum<LibmtpLibrary.LIBMTP_filetype_t> LIBMTP_filetype_t1, Pointer<LIBMTP_allowed_values_struct> LIBMTP_allowed_values_tPtr1) {
        return LIBMTP_Get_Allowed_Property_Values(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), (int) LIBMTP_property_t1.value(), (int) LIBMTP_filetype_t1.value(), Pointer.getPeer(LIBMTP_allowed_values_tPtr1));
    }

    protected native static int LIBMTP_Get_Allowed_Property_Values(@Ptr long LIBMTP_mtpdevice_tPtr1, int LIBMTP_property_t1, int LIBMTP_filetype_t1, @Ptr long LIBMTP_allowed_values_tPtr1);

    /**
     * Original signature : <code>void LIBMTP_destroy_allowed_values_t(LIBMTP_allowed_values_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:832</i>
     */
    public static void LIBMTP_destroy_allowed_values_t(Pointer<LIBMTP_allowed_values_struct> LIBMTP_allowed_values_tPtr1) {
        LIBMTP_destroy_allowed_values_t(Pointer.getPeer(LIBMTP_allowed_values_tPtr1));
    }

    protected native static void LIBMTP_destroy_allowed_values_t(@Ptr long LIBMTP_allowed_values_tPtr1);

    /**
     * @}<br>
     * @defgroup files The file management API.<br>
     * @{<br> Original signature : <code>LIBMTP_file_t* LIBMTP_new_file_t()</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:839</i>
     */
    public static Pointer<LIBMTP_file_struct> LIBMTP_new_file_t() {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_new_file_t$2(), LIBMTP_file_struct.class);
    }

    @Ptr
    @Name("LIBMTP_new_file_t")
    protected native static long LIBMTP_new_file_t$2();

    /**
     * Original signature : <code>void LIBMTP_destroy_file_t(LIBMTP_file_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:840</i>
     */
    public static void LIBMTP_destroy_file_t(Pointer<LIBMTP_file_struct> LIBMTP_file_tPtr1) {
        LIBMTP_destroy_file_t(Pointer.getPeer(LIBMTP_file_tPtr1));
    }

    protected native static void LIBMTP_destroy_file_t(@Ptr long LIBMTP_file_tPtr1);

    /**
     * Original signature : <code>const char* LIBMTP_Get_Filetype_Description(LIBMTP_filetype_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:841</i>
     */
    public static Pointer<Byte> LIBMTP_Get_Filetype_Description(IntValuedEnum<LibmtpLibrary.LIBMTP_filetype_t> LIBMTP_filetype_t1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Filetype_Description((int) LIBMTP_filetype_t1.value()), Byte.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Filetype_Description(int LIBMTP_filetype_t1);

    /**
     * Original signature : <code>LIBMTP_file_t* LIBMTP_Get_Filelisting(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:842</i>
     */
    public static Pointer<LIBMTP_file_struct> LIBMTP_Get_Filelisting(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Filelisting(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), LIBMTP_file_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Filelisting(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>LIBMTP_file_t* LIBMTP_Get_Filelisting_With_Callback(LIBMTP_mtpdevice_t*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:843</i>
     */
    public static Pointer<LIBMTP_file_struct> LIBMTP_Get_Filelisting_With_Callback(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Filelisting_With_Callback(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1)), LIBMTP_file_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Filelisting_With_Callback(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>LIBMTP_file_t* LIBMTP_Get_Files_And_Folders(LIBMTP_mtpdevice_t*, const uint32_t, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:848</i>
     */
    public static Pointer<LIBMTP_file_struct> LIBMTP_Get_Files_And_Folders(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, int uint32_t2) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Files_And_Folders(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, uint32_t2), LIBMTP_file_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Files_And_Folders(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int uint32_t2);

    /**
     * Original signature : <code>LIBMTP_file_t* LIBMTP_Get_Filemetadata(LIBMTP_mtpdevice_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:851</i>
     */
    public static Pointer<LIBMTP_file_struct> LIBMTP_Get_Filemetadata(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Filemetadata(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1), LIBMTP_file_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Filemetadata(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>int LIBMTP_Get_File_To_File(LIBMTP_mtpdevice_t*, uint32_t, const const char*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:852</i>
     */
    public static int LIBMTP_Get_File_To_File(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, Pointer<Byte> charPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return LIBMTP_Get_File_To_File(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, Pointer.getPeer(charPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1));
    }

    protected native static int LIBMTP_Get_File_To_File(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, @Ptr long charPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_File_To_File_Descriptor(LIBMTP_mtpdevice_t*, const uint32_t, const int, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:854</i>
     */
    public static int LIBMTP_Get_File_To_File_Descriptor(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, int int1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return LIBMTP_Get_File_To_File_Descriptor(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, int1, Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1));
    }

    protected native static int LIBMTP_Get_File_To_File_Descriptor(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int int1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_File_To_Handler(LIBMTP_mtpdevice_t*, const uint32_t, MTPDataPutFunc, void*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:859</i>
     */
    public static int LIBMTP_Get_File_To_Handler(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, Pointer<LibmtpLibrary.MTPDataPutFunc> MTPDataPutFunc1, Pointer<?> voidPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr2) {
        return LIBMTP_Get_File_To_Handler(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, Pointer.getPeer(MTPDataPutFunc1), Pointer.getPeer(voidPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr2));
    }

    protected native static int LIBMTP_Get_File_To_Handler(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, @Ptr long MTPDataPutFunc1, @Ptr long voidPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr2);

    /**
     * Original signature : <code>int LIBMTP_Send_File_From_File(LIBMTP_mtpdevice_t*, const const char*, const LIBMTP_file_t*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:865</i>
     */
    public static int LIBMTP_Send_File_From_File(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<Byte> charPtr1, Pointer<LIBMTP_file_struct> LIBMTP_file_tPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return LIBMTP_Send_File_From_File(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(LIBMTP_file_tPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1));
    }

    protected native static int LIBMTP_Send_File_From_File(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long charPtr1, @Ptr long LIBMTP_file_tPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>int LIBMTP_Send_File_From_File_Descriptor(LIBMTP_mtpdevice_t*, const int, const LIBMTP_file_t*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:870</i>
     */
    public static int LIBMTP_Send_File_From_File_Descriptor(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int int1, Pointer<LIBMTP_file_struct> LIBMTP_file_tPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return LIBMTP_Send_File_From_File_Descriptor(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), int1, Pointer.getPeer(LIBMTP_file_tPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1));
    }

    protected native static int LIBMTP_Send_File_From_File_Descriptor(@Ptr long LIBMTP_mtpdevice_tPtr1, int int1, @Ptr long LIBMTP_file_tPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>int LIBMTP_Send_File_From_Handler(LIBMTP_mtpdevice_t*, MTPDataGetFunc, void*, const LIBMTP_file_t*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:875</i>
     */
    public static int LIBMTP_Send_File_From_Handler(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LibmtpLibrary.MTPDataGetFunc> MTPDataGetFunc1, Pointer<?> voidPtr1, Pointer<LIBMTP_file_struct> LIBMTP_file_tPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr2) {
        return LIBMTP_Send_File_From_Handler(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(MTPDataGetFunc1), Pointer.getPeer(voidPtr1), Pointer.getPeer(LIBMTP_file_tPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr2));
    }

    protected native static int LIBMTP_Send_File_From_Handler(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long MTPDataGetFunc1, @Ptr long voidPtr1, @Ptr long LIBMTP_file_tPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr2);

    /**
     * Original signature : <code>int LIBMTP_Set_File_Name(LIBMTP_mtpdevice_t*, LIBMTP_file_t*, const char*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:880</i>
     */
    public static int LIBMTP_Set_File_Name(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_file_struct> LIBMTP_file_tPtr1, Pointer<Byte> charPtr1) {
        return LIBMTP_Set_File_Name(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_file_tPtr1), Pointer.getPeer(charPtr1));
    }

    protected native static int LIBMTP_Set_File_Name(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_file_tPtr1, @Ptr long charPtr1);

    /**
     * Original signature : <code>LIBMTP_filesampledata_t* LIBMTP_new_filesampledata_t()</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:883</i>
     */
    public static Pointer<LIBMTP_filesampledata_struct> LIBMTP_new_filesampledata_t() {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_new_filesampledata_t$2(), LIBMTP_filesampledata_struct.class);
    }

    @Ptr
    @Name("LIBMTP_new_filesampledata_t")
    protected native static long LIBMTP_new_filesampledata_t$2();

    /**
     * Original signature : <code>void LIBMTP_destroy_filesampledata_t(LIBMTP_filesampledata_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:884</i>
     */
    public static void LIBMTP_destroy_filesampledata_t(Pointer<LIBMTP_filesampledata_struct> LIBMTP_filesampledata_tPtr1) {
        LIBMTP_destroy_filesampledata_t(Pointer.getPeer(LIBMTP_filesampledata_tPtr1));
    }

    protected native static void LIBMTP_destroy_filesampledata_t(@Ptr long LIBMTP_filesampledata_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_Representative_Sample_Format(LIBMTP_mtpdevice_t*, const LIBMTP_filetype_t, LIBMTP_filesampledata_t**)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:885</i>
     */
    public static int LIBMTP_Get_Representative_Sample_Format(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, IntValuedEnum<LibmtpLibrary.LIBMTP_filetype_t> LIBMTP_filetype_t1, Pointer<Pointer<LIBMTP_filesampledata_struct>> LIBMTP_filesampledata_tPtrPtr1) {
        return LIBMTP_Get_Representative_Sample_Format(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), (int) LIBMTP_filetype_t1.value(), Pointer.getPeer(LIBMTP_filesampledata_tPtrPtr1));
    }

    protected native static int LIBMTP_Get_Representative_Sample_Format(@Ptr long LIBMTP_mtpdevice_tPtr1, int LIBMTP_filetype_t1, @Ptr long LIBMTP_filesampledata_tPtrPtr1);

    /**
     * Original signature : <code>int LIBMTP_Send_Representative_Sample(LIBMTP_mtpdevice_t*, const uint32_t, LIBMTP_filesampledata_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:888</i>
     */
    public static int LIBMTP_Send_Representative_Sample(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, Pointer<LIBMTP_filesampledata_struct> LIBMTP_filesampledata_tPtr1) {
        return LIBMTP_Send_Representative_Sample(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, Pointer.getPeer(LIBMTP_filesampledata_tPtr1));
    }

    protected native static int LIBMTP_Send_Representative_Sample(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, @Ptr long LIBMTP_filesampledata_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_Representative_Sample(LIBMTP_mtpdevice_t*, const uint32_t, LIBMTP_filesampledata_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:890</i>
     */
    public static int LIBMTP_Get_Representative_Sample(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, Pointer<LIBMTP_filesampledata_struct> LIBMTP_filesampledata_tPtr1) {
        return LIBMTP_Get_Representative_Sample(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, Pointer.getPeer(LIBMTP_filesampledata_tPtr1));
    }

    protected native static int LIBMTP_Get_Representative_Sample(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, @Ptr long LIBMTP_filesampledata_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_Thumbnail(LIBMTP_mtpdevice_t*, const uint32_t, unsigned char**, unsigned int*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:892</i>
     */
    public static int LIBMTP_Get_Thumbnail(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, Pointer<Pointer<Byte>> data, Pointer<Integer> size) {
        return LIBMTP_Get_Thumbnail(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, Pointer.getPeer(data), Pointer.getPeer(size));
    }

    protected native static int LIBMTP_Get_Thumbnail(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, @Ptr long data, @Ptr long size);

    /**
     * @}<br>
     * @defgroup tracks The track management API.<br>
     * @{<br> Original signature : <code>LIBMTP_track_t* LIBMTP_new_track_t()</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:900</i>
     */
    public static Pointer<LIBMTP_track_struct> LIBMTP_new_track_t() {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_new_track_t$2(), LIBMTP_track_struct.class);
    }

    @Ptr
    @Name("LIBMTP_new_track_t")
    protected native static long LIBMTP_new_track_t$2();

    /**
     * Original signature : <code>void LIBMTP_destroy_track_t(LIBMTP_track_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:901</i>
     */
    public static void LIBMTP_destroy_track_t(Pointer<LIBMTP_track_struct> LIBMTP_track_tPtr1) {
        LIBMTP_destroy_track_t(Pointer.getPeer(LIBMTP_track_tPtr1));
    }

    protected native static void LIBMTP_destroy_track_t(@Ptr long LIBMTP_track_tPtr1);

    /**
     * Original signature : <code>LIBMTP_track_t* LIBMTP_Get_Tracklisting(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:902</i>
     */
    public static Pointer<LIBMTP_track_struct> LIBMTP_Get_Tracklisting(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Tracklisting(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), LIBMTP_track_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Tracklisting(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>LIBMTP_track_t* LIBMTP_Get_Tracklisting_With_Callback(LIBMTP_mtpdevice_t*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:903</i>
     */
    public static Pointer<LIBMTP_track_struct> LIBMTP_Get_Tracklisting_With_Callback(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Tracklisting_With_Callback(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1)), LIBMTP_track_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Tracklisting_With_Callback(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>LIBMTP_track_t* LIBMTP_Get_Tracklisting_With_Callback_For_Storage(LIBMTP_mtpdevice_t*, const uint32_t, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:905</i>
     */
    public static Pointer<LIBMTP_track_struct> LIBMTP_Get_Tracklisting_With_Callback_For_Storage(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Tracklisting_With_Callback_For_Storage(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1)), LIBMTP_track_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Tracklisting_With_Callback_For_Storage(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>LIBMTP_track_t* LIBMTP_Get_Trackmetadata(LIBMTP_mtpdevice_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:907</i>
     */
    public static Pointer<LIBMTP_track_struct> LIBMTP_Get_Trackmetadata(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Trackmetadata(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1), LIBMTP_track_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Trackmetadata(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>int LIBMTP_Get_Track_To_File(LIBMTP_mtpdevice_t*, uint32_t, const const char*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:908</i>
     */
    public static int LIBMTP_Get_Track_To_File(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, Pointer<Byte> charPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return LIBMTP_Get_Track_To_File(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, Pointer.getPeer(charPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1));
    }

    protected native static int LIBMTP_Get_Track_To_File(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, @Ptr long charPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_Track_To_File_Descriptor(LIBMTP_mtpdevice_t*, const uint32_t, const int, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:910</i>
     */
    public static int LIBMTP_Get_Track_To_File_Descriptor(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, int int1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return LIBMTP_Get_Track_To_File_Descriptor(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, int1, Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1));
    }

    protected native static int LIBMTP_Get_Track_To_File_Descriptor(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, int int1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>int LIBMTP_Get_Track_To_Handler(LIBMTP_mtpdevice_t*, const uint32_t, MTPDataPutFunc, void*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:912</i>
     */
    public static int LIBMTP_Get_Track_To_Handler(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, Pointer<LibmtpLibrary.MTPDataPutFunc> MTPDataPutFunc1, Pointer<?> voidPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr2) {
        return LIBMTP_Get_Track_To_Handler(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, Pointer.getPeer(MTPDataPutFunc1), Pointer.getPeer(voidPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr2));
    }

    protected native static int LIBMTP_Get_Track_To_Handler(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, @Ptr long MTPDataPutFunc1, @Ptr long voidPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr2);

    /**
     * Original signature : <code>int LIBMTP_Send_Track_From_File(LIBMTP_mtpdevice_t*, const const char*, const LIBMTP_track_t*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:914</i>
     */
    public static int LIBMTP_Send_Track_From_File(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<Byte> charPtr1, Pointer<LIBMTP_track_struct> LIBMTP_track_tPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return LIBMTP_Send_Track_From_File(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(LIBMTP_track_tPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1));
    }

    protected native static int LIBMTP_Send_Track_From_File(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long charPtr1, @Ptr long LIBMTP_track_tPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>int LIBMTP_Send_Track_From_File_Descriptor(LIBMTP_mtpdevice_t*, const int, const LIBMTP_track_t*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:918</i>
     */
    public static int LIBMTP_Send_Track_From_File_Descriptor(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int int1, Pointer<LIBMTP_track_struct> LIBMTP_track_tPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr1) {
        return LIBMTP_Send_Track_From_File_Descriptor(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), int1, Pointer.getPeer(LIBMTP_track_tPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr1));
    }

    protected native static int LIBMTP_Send_Track_From_File_Descriptor(@Ptr long LIBMTP_mtpdevice_tPtr1, int int1, @Ptr long LIBMTP_track_tPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>int LIBMTP_Send_Track_From_Handler(LIBMTP_mtpdevice_t*, MTPDataGetFunc, void*, const LIBMTP_track_t*, const LIBMTP_progressfunc_t, const const void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:922</i>
     */
    public static int LIBMTP_Send_Track_From_Handler(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LibmtpLibrary.MTPDataGetFunc> MTPDataGetFunc1, Pointer<?> voidPtr1, Pointer<LIBMTP_track_struct> LIBMTP_track_tPtr1, Pointer<LibmtpLibrary.LIBMTP_progressfunc_t> LIBMTP_progressfunc_t1, Pointer<?> voidPtr2) {
        return LIBMTP_Send_Track_From_Handler(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(MTPDataGetFunc1), Pointer.getPeer(voidPtr1), Pointer.getPeer(LIBMTP_track_tPtr1), Pointer.getPeer(LIBMTP_progressfunc_t1), Pointer.getPeer(voidPtr2));
    }

    protected native static int LIBMTP_Send_Track_From_Handler(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long MTPDataGetFunc1, @Ptr long voidPtr1, @Ptr long LIBMTP_track_tPtr1, @Ptr long LIBMTP_progressfunc_t1, @Ptr long voidPtr2);

    /**
     * Original signature : <code>int LIBMTP_Update_Track_Metadata(LIBMTP_mtpdevice_t*, const const LIBMTP_track_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:926</i>
     */
    public static int LIBMTP_Update_Track_Metadata(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_track_struct> LIBMTP_track_tPtr1) {
        return LIBMTP_Update_Track_Metadata(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_track_tPtr1));
    }

    protected native static int LIBMTP_Update_Track_Metadata(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_track_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Track_Exists(LIBMTP_mtpdevice_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:928</i>
     */
    public static int LIBMTP_Track_Exists(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return LIBMTP_Track_Exists(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1);
    }

    protected native static int LIBMTP_Track_Exists(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>int LIBMTP_Set_Track_Name(LIBMTP_mtpdevice_t*, LIBMTP_track_t*, const char*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:929</i>
     */
    public static int LIBMTP_Set_Track_Name(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_track_struct> LIBMTP_track_tPtr1, Pointer<Byte> charPtr1) {
        return LIBMTP_Set_Track_Name(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_track_tPtr1), Pointer.getPeer(charPtr1));
    }

    protected native static int LIBMTP_Set_Track_Name(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_track_tPtr1, @Ptr long charPtr1);

    /**
     * @}<br>
     * @defgroup folders The folder management API.<br>
     * @{<br> Original signature : <code>LIBMTP_folder_t* LIBMTP_new_folder_t()</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:937</i>
     */
    public static Pointer<LIBMTP_folder_struct> LIBMTP_new_folder_t() {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_new_folder_t$2(), LIBMTP_folder_struct.class);
    }

    @Ptr
    @Name("LIBMTP_new_folder_t")
    protected native static long LIBMTP_new_folder_t$2();

    /**
     * Original signature : <code>void LIBMTP_destroy_folder_t(LIBMTP_folder_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:938</i>
     */
    public static void LIBMTP_destroy_folder_t(Pointer<LIBMTP_folder_struct> LIBMTP_folder_tPtr1) {
        LIBMTP_destroy_folder_t(Pointer.getPeer(LIBMTP_folder_tPtr1));
    }

    protected native static void LIBMTP_destroy_folder_t(@Ptr long LIBMTP_folder_tPtr1);

    /**
     * Original signature : <code>LIBMTP_folder_t* LIBMTP_Get_Folder_List(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:939</i>
     */
    public static Pointer<LIBMTP_folder_struct> LIBMTP_Get_Folder_List(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Folder_List(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), LIBMTP_folder_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Folder_List(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>LIBMTP_folder_t* LIBMTP_Get_Folder_List_For_Storage(LIBMTP_mtpdevice_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:940</i>
     */
    public static Pointer<LIBMTP_folder_struct> LIBMTP_Get_Folder_List_For_Storage(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Folder_List_For_Storage(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1), LIBMTP_folder_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Folder_List_For_Storage(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>LIBMTP_folder_t* LIBMTP_Find_Folder(LIBMTP_folder_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:942</i>
     */
    public static Pointer<LIBMTP_folder_struct> LIBMTP_Find_Folder(Pointer<LIBMTP_folder_struct> LIBMTP_folder_tPtr1, int uint32_t1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Find_Folder(Pointer.getPeer(LIBMTP_folder_tPtr1), uint32_t1), LIBMTP_folder_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Find_Folder(@Ptr long LIBMTP_folder_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>uint32_t LIBMTP_Create_Folder(LIBMTP_mtpdevice_t*, char*, uint32_t, uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:943</i>
     */
    public static int LIBMTP_Create_Folder(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<Byte> charPtr1, int uint32_t1, int uint32_t2) {
        return LIBMTP_Create_Folder(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(charPtr1), uint32_t1, uint32_t2);
    }

    protected native static int LIBMTP_Create_Folder(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long charPtr1, int uint32_t1, int uint32_t2);

    /**
     * Original signature : <code>int LIBMTP_Set_Folder_Name(LIBMTP_mtpdevice_t*, LIBMTP_folder_t*, const char*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:944</i>
     */
    public static int LIBMTP_Set_Folder_Name(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_folder_struct> LIBMTP_folder_tPtr1, Pointer<Byte> charPtr1) {
        return LIBMTP_Set_Folder_Name(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_folder_tPtr1), Pointer.getPeer(charPtr1));
    }

    protected native static int LIBMTP_Set_Folder_Name(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_folder_tPtr1, @Ptr long charPtr1);

    /**
     * @}<br>
     * @defgroup playlists The audio/video playlist management API.<br>
     * @{<br> Original signature : <code>LIBMTP_playlist_t* LIBMTP_new_playlist_t()</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:953</i>
     */
    public static Pointer<LIBMTP_playlist_struct> LIBMTP_new_playlist_t() {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_new_playlist_t$2(), LIBMTP_playlist_struct.class);
    }

    @Ptr
    @Name("LIBMTP_new_playlist_t")
    protected native static long LIBMTP_new_playlist_t$2();

    /**
     * Original signature : <code>void LIBMTP_destroy_playlist_t(LIBMTP_playlist_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:954</i>
     */
    public static void LIBMTP_destroy_playlist_t(Pointer<LIBMTP_playlist_struct> LIBMTP_playlist_tPtr1) {
        LIBMTP_destroy_playlist_t(Pointer.getPeer(LIBMTP_playlist_tPtr1));
    }

    protected native static void LIBMTP_destroy_playlist_t(@Ptr long LIBMTP_playlist_tPtr1);

    /**
     * Original signature : <code>LIBMTP_playlist_t* LIBMTP_Get_Playlist_List(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:955</i>
     */
    public static Pointer<LIBMTP_playlist_struct> LIBMTP_Get_Playlist_List(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Playlist_List(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), LIBMTP_playlist_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Playlist_List(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>LIBMTP_playlist_t* LIBMTP_Get_Playlist(LIBMTP_mtpdevice_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:956</i>
     */
    public static Pointer<LIBMTP_playlist_struct> LIBMTP_Get_Playlist(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Playlist(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1), LIBMTP_playlist_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Playlist(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>int LIBMTP_Create_New_Playlist(LIBMTP_mtpdevice_t*, const LIBMTP_playlist_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:957</i>
     */
    public static int LIBMTP_Create_New_Playlist(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_playlist_struct> LIBMTP_playlist_tPtr1) {
        return LIBMTP_Create_New_Playlist(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_playlist_tPtr1));
    }

    protected native static int LIBMTP_Create_New_Playlist(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_playlist_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Update_Playlist(LIBMTP_mtpdevice_t*, const LIBMTP_playlist_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:958</i>
     */
    public static int LIBMTP_Update_Playlist(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_playlist_struct> LIBMTP_playlist_tPtr1) {
        return LIBMTP_Update_Playlist(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_playlist_tPtr1));
    }

    protected native static int LIBMTP_Update_Playlist(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_playlist_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Set_Playlist_Name(LIBMTP_mtpdevice_t*, LIBMTP_playlist_t*, const char*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:959</i>
     */
    public static int LIBMTP_Set_Playlist_Name(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_playlist_struct> LIBMTP_playlist_tPtr1, Pointer<Byte> charPtr1) {
        return LIBMTP_Set_Playlist_Name(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_playlist_tPtr1), Pointer.getPeer(charPtr1));
    }

    protected native static int LIBMTP_Set_Playlist_Name(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_playlist_tPtr1, @Ptr long charPtr1);

    /**
     * @}<br>
     * @defgroup albums The audio/video album management API.<br>
     * @{<br> Original signature : <code>LIBMTP_album_t* LIBMTP_new_album_t()</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:966</i>
     */
    public static Pointer<LIBMTP_album_struct> LIBMTP_new_album_t() {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_new_album_t$2(), LIBMTP_album_struct.class);
    }

    @Ptr
    @Name("LIBMTP_new_album_t")
    protected native static long LIBMTP_new_album_t$2();

    /**
     * Original signature : <code>void LIBMTP_destroy_album_t(LIBMTP_album_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:967</i>
     */
    public static void LIBMTP_destroy_album_t(Pointer<LIBMTP_album_struct> LIBMTP_album_tPtr1) {
        LIBMTP_destroy_album_t(Pointer.getPeer(LIBMTP_album_tPtr1));
    }

    protected native static void LIBMTP_destroy_album_t(@Ptr long LIBMTP_album_tPtr1);

    /**
     * Original signature : <code>LIBMTP_album_t* LIBMTP_Get_Album_List(LIBMTP_mtpdevice_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:968</i>
     */
    public static Pointer<LIBMTP_album_struct> LIBMTP_Get_Album_List(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Album_List(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1)), LIBMTP_album_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Album_List(@Ptr long LIBMTP_mtpdevice_tPtr1);

    /**
     * Original signature : <code>LIBMTP_album_t* LIBMTP_Get_Album_List_For_Storage(LIBMTP_mtpdevice_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:969</i>
     */
    public static Pointer<LIBMTP_album_struct> LIBMTP_Get_Album_List_For_Storage(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Album_List_For_Storage(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1), LIBMTP_album_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Album_List_For_Storage(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>LIBMTP_album_t* LIBMTP_Get_Album(LIBMTP_mtpdevice_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:970</i>
     */
    public static Pointer<LIBMTP_album_struct> LIBMTP_Get_Album(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return (Pointer) Pointer.pointerToAddress(LIBMTP_Get_Album(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1), LIBMTP_album_struct.class);
    }

    @Ptr
    protected native static long LIBMTP_Get_Album(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>int LIBMTP_Create_New_Album(LIBMTP_mtpdevice_t*, const LIBMTP_album_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:971</i>
     */
    public static int LIBMTP_Create_New_Album(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_album_struct> LIBMTP_album_tPtr1) {
        return LIBMTP_Create_New_Album(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_album_tPtr1));
    }

    protected native static int LIBMTP_Create_New_Album(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_album_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Update_Album(LIBMTP_mtpdevice_t*, const const LIBMTP_album_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:972</i>
     */
    public static int LIBMTP_Update_Album(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_album_struct> LIBMTP_album_tPtr1) {
        return LIBMTP_Update_Album(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_album_tPtr1));
    }

    protected native static int LIBMTP_Update_Album(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_album_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Set_Album_Name(LIBMTP_mtpdevice_t*, LIBMTP_album_t*, const char*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:973</i>
     */
    public static int LIBMTP_Set_Album_Name(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LIBMTP_album_struct> LIBMTP_album_tPtr1, Pointer<Byte> charPtr1) {
        return LIBMTP_Set_Album_Name(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_album_tPtr1), Pointer.getPeer(charPtr1));
    }

    protected native static int LIBMTP_Set_Album_Name(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_album_tPtr1, @Ptr long charPtr1);

    /**
     * @}<br>
     * @defgroup objects The object management API.<br>
     * @{<br> Original signature : <code>int LIBMTP_Delete_Object(LIBMTP_mtpdevice_t*, uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:980</i>
     */
    public static int LIBMTP_Delete_Object(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return LIBMTP_Delete_Object(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1);
    }

    protected native static int LIBMTP_Delete_Object(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>int LIBMTP_Set_Object_Filename(LIBMTP_mtpdevice_t*, uint32_t, char*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:981</i>
     */
    public static int LIBMTP_Set_Object_Filename(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, Pointer<Byte> charPtr1) {
        return LIBMTP_Set_Object_Filename(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, Pointer.getPeer(charPtr1));
    }

    protected native static int LIBMTP_Set_Object_Filename(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, @Ptr long charPtr1);

    /**
     * Original signature : <code>int LIBMTP_GetPartialObject(LIBMTP_mtpdevice_t*, const uint32_t, uint64_t, uint32_t, unsigned char**, unsigned int*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:982</i>
     */
    public static int LIBMTP_GetPartialObject(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, long uint64_t1, int uint32_t2, Pointer<Pointer<Byte>> charPtrPtr1, Pointer<Integer> intPtr1) {
        return LIBMTP_GetPartialObject(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, uint64_t1, uint32_t2, Pointer.getPeer(charPtrPtr1), Pointer.getPeer(intPtr1));
    }

    protected native static int LIBMTP_GetPartialObject(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, long uint64_t1, int uint32_t2, @Ptr long charPtrPtr1, @Ptr long intPtr1);

    /**
     * Original signature : <code>int LIBMTP_SendPartialObject(LIBMTP_mtpdevice_t*, const uint32_t, uint64_t, unsigned char*, unsigned int)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:985</i>
     */
    public static int LIBMTP_SendPartialObject(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, long uint64_t1, Pointer<Byte> charPtr1, int int1) {
        return LIBMTP_SendPartialObject(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, uint64_t1, Pointer.getPeer(charPtr1), int1);
    }

    protected native static int LIBMTP_SendPartialObject(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, long uint64_t1, @Ptr long charPtr1, int int1);

    /**
     * Original signature : <code>int LIBMTP_BeginEditObject(LIBMTP_mtpdevice_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:987</i>
     */
    public static int LIBMTP_BeginEditObject(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return LIBMTP_BeginEditObject(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1);
    }

    protected native static int LIBMTP_BeginEditObject(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>int LIBMTP_EndEditObject(LIBMTP_mtpdevice_t*, const uint32_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:988</i>
     */
    public static int LIBMTP_EndEditObject(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1) {
        return LIBMTP_EndEditObject(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1);
    }

    protected native static int LIBMTP_EndEditObject(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1);

    /**
     * Original signature : <code>int LIBMTP_TruncateObject(LIBMTP_mtpdevice_t*, const uint32_t, uint64_t)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:989</i>
     */
    public static int LIBMTP_TruncateObject(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, int uint32_t1, long uint64_t1) {
        return LIBMTP_TruncateObject(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), uint32_t1, uint64_t1);
    }

    protected native static int LIBMTP_TruncateObject(@Ptr long LIBMTP_mtpdevice_tPtr1, int uint32_t1, long uint64_t1);

    /**
     * Original signature : <code>int LIBMTP_Read_Event(LIBMTP_mtpdevice_t*, LIBMTP_event_t*, uint32_t*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:997</i>
     */
    public static int LIBMTP_Read_Event(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<IntValuedEnum<LibmtpLibrary.LIBMTP_event_enum>> LIBMTP_event_tPtr1, Pointer<Integer> uint32_tPtr1) {
        return LIBMTP_Read_Event(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_event_tPtr1), Pointer.getPeer(uint32_tPtr1));
    }

    protected native static int LIBMTP_Read_Event(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_event_tPtr1, @Ptr long uint32_tPtr1);

    /**
     * Original signature : <code>int LIBMTP_Read_Event_Async(LIBMTP_mtpdevice_t*, LIBMTP_event_cb_fn, void*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:998</i>
     */
    public static int LIBMTP_Read_Event_Async(Pointer<LIBMTP_mtpdevice_struct> LIBMTP_mtpdevice_tPtr1, Pointer<LibmtpLibrary.LIBMTP_event_cb_fn> LIBMTP_event_cb_fn1, Pointer<?> voidPtr1) {
        return LIBMTP_Read_Event_Async(Pointer.getPeer(LIBMTP_mtpdevice_tPtr1), Pointer.getPeer(LIBMTP_event_cb_fn1), Pointer.getPeer(voidPtr1));
    }

    protected native static int LIBMTP_Read_Event_Async(@Ptr long LIBMTP_mtpdevice_tPtr1, @Ptr long LIBMTP_event_cb_fn1, @Ptr long voidPtr1);

    /**
     * Original signature : <code>int LIBMTP_Handle_Events_Timeout_Completed(timeval*, int*)</code><br>
     * <i>native declaration : /usr/local/Cellar/libmtp/1.1.13/include/libmtp.h:999</i>
     */
    public static int LIBMTP_Handle_Events_Timeout_Completed(Pointer timevalPtr1, Pointer<Integer> intPtr1) {
        return LIBMTP_Handle_Events_Timeout_Completed(Pointer.getPeer(timevalPtr1), Pointer.getPeer(intPtr1));
    }

    protected native static int LIBMTP_Handle_Events_Timeout_Completed(@Ptr long timevalPtr1, @Ptr long intPtr1);

    public int LIBMTP_debug() {
        try {
            return (int) BridJ.getNativeLibrary("libmtp").getSymbolPointer("LIBMTP_debug").getInt();
        } catch (Throwable $ex$) {
            throw new RuntimeException($ex$);
        }
    }

    public LibmtpLibrary LIBMTP_debug(int LIBMTP_debug) {
        try {
            {
                BridJ.getNativeLibrary("libmtp").getSymbolPointer("LIBMTP_debug").setInt(LIBMTP_debug);
                return this;
            }
        } catch (Throwable $ex$) {
            throw new RuntimeException($ex$);
        }
    }
}
